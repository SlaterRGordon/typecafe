// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String               @id @default(cuid())
    name                String?
    email               String?              @unique
    emailVerified       DateTime?
    username            String?              @unique
    password            String?
    image               String?
    bio                 String?
    link                String?
    isAdmin             Boolean              @default(false)
    accounts            Account[]
    sessions            Session[]
    tests               Test[]
    colorConfigurations ColorConfiguration[]
    practiceStats PracticeStats[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ColorConfiguration {
    id         String   @id @default(cuid())
    userId     String
    name       String   @unique
    background String
    text       String
    primary    String
    secondary  String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Test {
    id        String   @id @default(cuid())
    userId    String
    typeId    String
    speed     Float
    accuracy  Float
    score     Float
    count     Int      @default(0)
    options   String
    summaryDate DateTime  @db.Date
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    type      TestType @relation(fields: [typeId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([typeId])
}

model TestType {
    id          String   @id @default(cuid())
    mode        Int
    subMode     Int
    language    String
    competitive Boolean
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    tests Test[]
}

model PracticeStats {
    id          String   @id @default(cuid())
    userId    String
    character String @db.VarChar(1)  @unique
    total Int
    correct Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}